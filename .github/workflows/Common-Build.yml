# Copyright 2023-2024 Alexander St√§rk
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

name: NetCommonBuild

permissions:
  contents: write
  packages: write

on:
  workflow_call:
    inputs:
      basBuildType:
        description: 'The type of build that should be started. Supported values are ''Alpha'', ''CI'', ''Preview'', ''RC'' and ''Release''.'
        default: 'Preview'
        required: true
        type: string
      projectOrSolution:
        description: 'The project or solution that will be built. The default builds all solutions in the "src" directory of the repository.'
        default: 'src/*.sln'
        required: false
        type: string
      dotNetVersion:
        description: 'The version of .Net that will be used for the build.'
        default: 8.0.x
        required: false
        type: string
      publishTargetFramework:
        description: 'The target framework that will be used for publishing.'
        default: ''
        required: false
        type: string
      runsOn:
        description: 'Defines the type of machine to run the job on.'
        default: ubuntu-latest
        required: false
        type: string
jobs:
  build:

    runs-on: ${{ inputs.runsOn }}

    steps:
    - name: Print Input Parameters
      run: |
        echo basBuildType = ${{ inputs.basBuildType }}
        echo projectOrSolution = ${{ inputs.projectOrSolution }}
        echo dotNetVersion = ${{ inputs.dotNetVersion }}
        echo publishTargetFramework = ${{ inputs.publishTargetFramework }}
        echo runsOn = ${{ inputs.runsOn }}
    
    - name: Validate Input Parameters
      if: inputs.basBuildType != 'Alpha' && inputs.basBuildType != 'CI' && inputs.basBuildType != 'Preview' && inputs.basBuildType != 'RC' && inputs.basBuildType != 'Release'
      run: |
        echo 'Please check the basBuildType input. Supported values are ''Alpha'', ''CI'', ''Preview'', ''RC'' and ''Release''.'
        exit 1
    
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotNetVersion }}
        dotnet-quality: 'ga'
    
    - name: Git Semantic Versioning
      id: versioning
      uses: PaulHatch/semantic-version@v5.4.0
      with:
        branch: ${{ github.ref_name }} # default is HEAD
        major_pattern: "BREAKING CHANGE:" # default is (MAJOR)
        minor_pattern: "feat:" # default is (MINOR)
        version_format: "${major}.${minor}.${patch}${{ inputs.basBuildType != 'Release' && format('-{0}${{increment}}', inputs.basBuildType) || '' }}"
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        #search_commit_body: # default is false
    
    - name: Dotnet Restore
      run: dotnet restore ${{ inputs.projectOrSolution }}
    
    - name: Dotnet Build
      run: dotnet build ${{ inputs.projectOrSolution }} -c Release --no-restore -p:BAS_CB_VersionMajor=${{ steps.versioning.outputs.major }} -p:BAS_CB_VersionMinor=${{ steps.versioning.outputs.minor }} -p:BAS_CB_VersionBuild=${{ steps.versioning.outputs.patch }} -p:BAS_CB_VersionRevision=${{ steps.versioning.outputs.increment }} -p:BAS_CB_BuildType=${{ inputs.basBuildType }}
    
    - name: Dotnet Test
      run: dotnet test ${{ inputs.projectOrSolution }} -c Release --no-build --verbosity normal
    
    - name: Dotnet Publish
      run: dotnet publish ${{ inputs.projectOrSolution }} -c Release --no-build ${{ inputs.publishTargetFramework != '' && format('-f {0}', inputs.publishTargetFramework) || '' }}
    
    - name: Attach Build Artifacts to Workflow Run
      uses: actions/upload-artifact@v4.3.3
      with:
        name: Artifacts
        path: src/artifacts/publish/**
        if-no-files-found: error
        retention-days: 10
    
    - name: Dotnet Pack
      run: dotnet pack ${{ inputs.projectOrSolution }} -c Release -p:BAS_CB_VersionMajor=${{ steps.versioning.outputs.major }} -p:BAS_CB_VersionMinor=${{ steps.versioning.outputs.minor }} -p:BAS_CB_VersionBuild=${{ steps.versioning.outputs.patch }} -p:BAS_CB_VersionRevision=${{ steps.versioning.outputs.increment }} -p:BAS_CB_BuildType=${{ inputs.basBuildType }}
    
    - name: Attach NuGet Artifacts to Workflow Run
      uses: actions/upload-artifact@v4.3.3
      with:
        name: NuGet Packages
        path: src/artifacts/package/**/*.nupkg
        if-no-files-found: error
        retention-days: 10
    
    - name: Create Git Tag
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ steps.versioning.outputs.version }}',
            sha: context.sha
          })
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: inputs.basBuildType == 'Release' || inputs.basBuildType == 'RC' || inputs.basBuildType == 'Preview'
      with:
        files: src/**/*.nupkg
        tag_name: v${{ steps.versioning.outputs.version }}
        prerelease: ${{ inputs.basBuildType != 'Release' }}
    
    - name: Dotnet NuGet Push NuGet.org
      if: inputs.basBuildType == 'Release' || inputs.basBuildType == 'RC' || inputs.basBuildType == 'Preview'
      run: dotnet nuget push src/**/*.nupkg --source https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }}
      
    - name: Dotnet NuGet Push GitHub
      run: dotnet nuget push src/**/*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json -k ${{ secrets.GITHUB_TOKEN }}
